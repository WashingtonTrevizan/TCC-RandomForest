"""
Script para testar o pipeline completo corrigido
Execute este script para verificar se tudo est√° funcionando
"""
import os
import sys
import pandas as pd

def test_feature_engineering():
    """Testa o m√≥dulo de feature engineering"""
    print("="*60)
    print("TESTE 1: Feature Engineering")
    print("="*60)
    
    try:
        sys.path.append("tools")
        from feature_engineering import full_feature_pipeline, REQUIRED_FEATURES
        
        # Carregar dados de exemplo
        df = pd.read_csv("data/pcap_convertido.csv")
        print(f"‚úì Dados carregados: {df.shape}")
        
        # Testar pipeline
        df_processed = full_feature_pipeline(df.head(1000), include_labels=True)  # S√≥ uma amostra para teste
        print(f"‚úì Pipeline executado: {df_processed.shape}")
        
        # Verificar features
        missing = [f for f in REQUIRED_FEATURES if f not in df_processed.columns]
        if missing:
            print(f"‚úó Features faltantes: {missing}")
            return False
        else:
            print(f"‚úì Todas as features presentes: {REQUIRED_FEATURES}")
        
        print("‚úÖ Feature Engineering: PASSOU")
        return True
        
    except Exception as e:
        print(f"‚ùå Feature Engineering: FALHOU - {e}")
        return False

def test_data_processing():
    """Testa o processamento completo dos dados"""
    print("\n" + "="*60)
    print("TESTE 2: Processamento de Dados")
    print("="*60)
    
    try:
        # Executar pipeline de tratamento
        print("Executando tratar_csv_para_ia.py...")
        os.system("python tools/tratar_csv_para_ia.py")
        
        # Verificar se arquivo foi criado
        if os.path.exists("data/dataset_final.csv"):
            df = pd.read_csv("data/dataset_final.csv")
            print(f"‚úì Dataset final criado: {df.shape}")
            print(f"‚úì Colunas: {list(df.columns)}")
            
            if 'Label' in df.columns:
                print(f"‚úì Distribui√ß√£o de labels:")
                print(df['Label'].value_counts())
        else:
            print("‚ùå Arquivo dataset_final.csv n√£o foi criado")
            return False
        
        print("‚úÖ Processamento de Dados: PASSOU")
        return True
        
    except Exception as e:
        print(f"‚ùå Processamento de Dados: FALHOU - {e}")
        return False

def test_preprocessing():
    """Testa o pr√©-processamento"""
    print("\n" + "="*60)
    print("TESTE 3: Pr√©-processamento")
    print("="*60)
    
    try:
        # Executar pr√©-processamento
        print("Executando preprocessamento_ia.py...")
        os.system("python tools/preprocessamento_ia.py")
        
        # Verificar arquivos criados
        files_to_check = [
            "data/dataset_preprocessado.csv",
            "model/scaler.joblib",
            "model/encoder.joblib",
            "model/label_mapping.json"
        ]
        
        for file_path in files_to_check:
            if os.path.exists(file_path):
                print(f"‚úì {file_path} criado")
            else:
                print(f"‚ùå {file_path} n√£o encontrado")
                return False
        
        # Verificar dados preprocessados
        df = pd.read_csv("data/dataset_preprocessado.csv")
        print(f"‚úì Dataset preprocessado: {df.shape}")
        
        print("‚úÖ Pr√©-processamento: PASSOU")
        return True
        
    except Exception as e:
        print(f"‚ùå Pr√©-processamento: FALHOU - {e}")
        return False

def test_model_training():
    """Testa o treinamento do modelo"""
    print("\n" + "="*60)
    print("TESTE 4: Treinamento do Modelo")
    print("="*60)
    
    try:
        # Executar treinamento
        print("Executando treinamento do modelo...")
        os.system("python model/main_train_model.py")
        
        # Verificar se modelo foi criado
        if os.path.exists("model/ddos_model.pkl"):
            print("‚úì Modelo ddos_model.pkl criado")
        else:
            print("‚ùå Modelo n√£o foi criado")
            return False
        
        if os.path.exists("model/model_metadata.json"):
            print("‚úì Metadados do modelo criados")
        else:
            print("‚ùå Metadados do modelo n√£o foram criados")
        
        print("‚úÖ Treinamento do Modelo: PASSOU")
        return True
        
    except Exception as e:
        print(f"‚ùå Treinamento do Modelo: FALHOU - {e}")
        return False

def test_inference():
    """Testa a infer√™ncia"""
    print("\n" + "="*60)
    print("TESTE 5: Infer√™ncia")
    print("="*60)
    
    try:
        # Usar um arquivo pequeno para teste
        test_file = "data/pcap_convertido.csv"
        
        # Executar infer√™ncia
        print("Executando infer√™ncia...")
        cmd = f"python tools/inferencia_ddos.py {test_file} data/teste_inferencia.csv"
        os.system(cmd)
        
        # Verificar resultado
        if os.path.exists("data/teste_inferencia.csv"):
            df = pd.read_csv("data/teste_inferencia.csv")
            print(f"‚úì Infer√™ncia conclu√≠da: {df.shape}")
            
            if 'Predito' in df.columns:
                print(f"‚úì Coluna 'Predito' encontrada")
                print(f"‚úì Distribui√ß√£o das predi√ß√µes:")
                print(df['Predito'].value_counts())
            else:
                print("‚ùå Coluna 'Predito' n√£o encontrada")
                return False
        else:
            print("‚ùå Arquivo de resultado da infer√™ncia n√£o foi criado")
            return False
        
        print("‚úÖ Infer√™ncia: PASSOU")
        return True
        
    except Exception as e:
        print(f"‚ùå Infer√™ncia: FALHOU - {e}")
        return False

def main():
    """Executa todos os testes"""
    print("üöÄ INICIANDO TESTES DO PIPELINE CORRIGIDO")
    print("="*60)
    
    tests = [
        test_feature_engineering,
        test_data_processing, 
        test_preprocessing,
        test_model_training,
        test_inference
    ]
    
    results = []
    for test in tests:
        result = test()
        results.append(result)
    
    # Resumo final
    print("\n" + "="*60)
    print("RESUMO DOS TESTES")
    print("="*60)
    
    test_names = [
        "Feature Engineering",
        "Processamento de Dados", 
        "Pr√©-processamento",
        "Treinamento do Modelo",
        "Infer√™ncia"
    ]
    
    passed = 0
    for i, (name, result) in enumerate(zip(test_names, results)):
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{i+1}. {name:25} | {status}")
        if result:
            passed += 1
    
    print(f"\nTotal: {passed}/{len(tests)} testes passaram")
    
    if passed == len(tests):
        print("\nüéâ TODOS OS TESTES PASSARAM! Pipeline corrigido com sucesso!")
    else:
        print(f"\n‚ö†Ô∏è  {len(tests)-passed} teste(s) falharam. Verifique os erros acima.")

if __name__ == "__main__":
    main()
